// Autogenerated from Pigeon (v0.1.0-experimental.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.MessagingTiming;

import java.util.HashMap;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;

/** Generated class from Pigeon. */
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StringMessage {
    private String message;
    public String getMessage() { return message; }
    public void setMessage(String setterArg) { this.message = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<String, Object>();
      toMapResult.put("message", message);
      return toMapResult;
    }
    static StringMessage fromMap(HashMap map) {
      StringMessage fromMapResult = new StringMessage();
      fromMapResult.message = (String)map.get("message");
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VoidMessage {
    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<String, Object>();
      return toMapResult;
    }
    static VoidMessage fromMap(HashMap map) {
      VoidMessage fromMapResult = new VoidMessage();
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface Api {
    StringMessage getPlatformVersion(VoidMessage arg);

    /** Sets up an instance of `Api` to handle messages through the `binaryMessenger` */
    public static void setup(BinaryMessenger binaryMessenger, Api api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<Object>(binaryMessenger, "dev.flutter.pigeon.Api.getPlatformVersion", new StandardMessageCodec());
        channel.setMessageHandler(new BasicMessageChannel.MessageHandler<Object>() {
          public void onMessage(Object message, BasicMessageChannel.Reply<Object> reply) {
            VoidMessage input = VoidMessage.fromMap((HashMap)message);
            HashMap<String, HashMap> wrapped = new HashMap<String, HashMap>();
            try {
              StringMessage output = api.getPlatformVersion(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          }
        });
      }
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<String, Object>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", null);
    errorMap.put("details", null);
    return errorMap;
  }
}
