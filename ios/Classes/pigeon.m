// Autogenerated from Dartle.
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = [NSDictionary dictionaryWithObjectsAndKeys:
        (error.code ? error.code : [NSNull null]), @"code",
        (error.message ? error.message : [NSNull null]), @"message",
        (error.details ? error.details : [NSNull null]), @"details",
        nil];
  }
  return [NSDictionary dictionaryWithObjectsAndKeys:
      (result ? result : [NSNull null]), @"result",
      errorDict, @"error",
      nil];
}

@interface PGNStringMessage ()
+(PGNStringMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface PGNVoidMessage ()
+(PGNVoidMessage*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation PGNStringMessage
+(PGNStringMessage*)fromMap:(NSDictionary*)dict {
  PGNStringMessage* result = [[PGNStringMessage alloc] init];
  result.message = dict[@"message"];
  if ((NSNull *)result.message == [NSNull null]) {
    result.message = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.message ? self.message : [NSNull null]), @"message", nil];
}
@end

@implementation PGNVoidMessage
+(PGNVoidMessage*)fromMap:(NSDictionary*)dict {
  PGNVoidMessage* result = [[PGNVoidMessage alloc] init];
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:nil];
}
@end

void PGNApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<PGNApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.Api.getPlatformVersion"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        PGNVoidMessage *input = [PGNVoidMessage fromMap:message];
        FlutterError *error;
        PGNStringMessage *output = [api getPlatformVersion:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
