// Autogenerated from Pigeon (v0.1.0-experimental.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
import 'package:flutter/services.dart';

class StringMessage {
  String message;
  // ignore: unused_element
  Map _toMap() {
    Map dartleMap = Map();
    dartleMap["message"] = message;
    return dartleMap;
  }
  // ignore: unused_element
  static StringMessage _fromMap(Map dartleMap) {
    var result = StringMessage();
    result.message = dartleMap["message"];
    return result;
  }
}

class VoidMessage {
  // ignore: unused_element
  Map _toMap() {
    Map dartleMap = Map();
    return dartleMap;
  }
  // ignore: unused_element
  static VoidMessage _fromMap(Map dartleMap) {
    var result = VoidMessage();
    return result;
  }
}

class Api {
  Future<StringMessage> getPlatformVersion(VoidMessage arg) async {
    Map requestMap = arg._toMap();
    BasicMessageChannel channel =
        BasicMessageChannel('dev.flutter.pigeon.Api.getPlatformVersion', StandardMessageCodec());
    
    Map replyMap = await channel.send(requestMap);
    if (replyMap['error'] != null) {
      Map error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return StringMessage._fromMap(replyMap['result']);
    }
    
  }
}

